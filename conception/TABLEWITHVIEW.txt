CREATE TABLE users(
   id INT AUTO,
   external_id VARCHAR(250) ,
   name VARCHAR(50) ,
   email VARCHAR(50) ,
   password VARCHAR(250) ,
   address VARCHAR(50) ,
   primary_number VARCHAR(50) ,
   secondary_number VARCHAR(50) ,
   image_path VARCHAR(250) ,
   remember_token VARCHAR(50) ,
   languages VARCHAR(50) ,
   deleted_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   PRIMARY KEY(id),
   UNIQUE(external_id),
   UNIQUE(email)
);

CREATE TABLE mails(
   id INT,
   subject VARCHAR(50) ,
   body VARCHAR(50) ,
   template VARCHAR(50) ,
   email VARCHAR(50) ,
   send_at DATETIME,
   sent_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   user_id INT NOT NULL,
   PRIMARY KEY(id),
   UNIQUE(email),
   FOREIGN KEY(user_id) REFERENCES users(id)
);

CREATE TABLE permissions(
   id INT,
   external_id VARCHAR(250) ,
   name VARCHAR(50) ,
   display_name VARCHAR(50) ,
   description VARCHAR(50) ,
   groupings VARCHAR(50) ,
   created_at DATETIME,
   updated_at DATETIME,
   PRIMARY KEY(id),
   UNIQUE(external_id)
);

CREATE TABLE roles(
   id INT,
   external_id VARCHAR(250) ,
   name VARCHAR(50) ,
   display_name VARCHAR(50) ,
   description VARCHAR(50) ,
   created_at DATETIME,
   updated_at DATETIME,
   PRIMARY KEY(id),
   UNIQUE(external_id)
);

CREATE TABLE departements(
   id INT AUTO_INCREMENT,
   external_id VARCHAR(250) ,
   name VARCHAR(50) ,
   description VARCHAR(50) ,
   created_at DATETIME,
   updated_at DATETIME,
   PRIMARY KEY(id),
   UNIQUE(external_id)
);

CREATE TABLE absences(
   id INT,
   external_id VARCHAR(250) ,
   reason VARCHAR(50) ,
   comment VARCHAR(50) ,
   start_at DATETIME,
   end_at DATETIME,
   medical_certificate INT,
   created_at DATETIME,
   updated_at DATETIME,
   user_id INT NOT NULL,
   PRIMARY KEY(id),
   UNIQUE(external_id),
   FOREIGN KEY(user_id) REFERENCES users(id)
);

CREATE TABLE comments(
   id INT,
   external_id VARCHAR(250) ,
   description VARCHAR(50) ,
   source_type VARCHAR(50) ,
   source_id VARCHAR(50) ,
   deleted_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   user_id INT NOT NULL,
   PRIMARY KEY(id),
   UNIQUE(external_id),
   FOREIGN KEY(user_id) REFERENCES users(id)
);

CREATE TABLE industries(
   id INT,
   external_id VARCHAR(250) ,
   name VARCHAR(50) ,
   PRIMARY KEY(id),
   UNIQUE(external_id)
);

CREATE TABLE clients(
   id INT,
   external_id VARCHAR(250) ,
   address VARCHAR(50) ,
   zipcode VARCHAR(50) ,
   city VARCHAR(50) ,
   company_name VARCHAR(50) ,
   vat VARCHAR(50) ,
   company_type VARCHAR(50) ,
   client_number INT,
   deleted_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   user_id INT NOT NULL,
   industry_id INT NOT NULL,
   PRIMARY KEY(id),
   UNIQUE(external_id),
   FOREIGN KEY(user_id) REFERENCES users(id),
   FOREIGN KEY(industry_id) REFERENCES industries(id)
);

CREATE TABLE contacts(
   id INT,
   external_id VARCHAR(250) ,
   name VARCHAR(50) ,
   email VARCHAR(50) ,
   primary_number VARCHAR(50) ,
   secondary_number VARCHAR(50) ,
   is_primary BOOLEAN,
   deleted_id DATETIME,
   created_id DATETIME,
   updated_id DATETIME,
   client_id INT NOT NULL,
   PRIMARY KEY(id),
   UNIQUE(external_id),
   UNIQUE(email),
   UNIQUE(primary_number),
   UNIQUE(secondary_number),
   FOREIGN KEY(client_id) REFERENCES clients(id)
);

CREATE TABLE settings(
   id INT,
   client_number INT,
   invoice_number INT,
   country VARCHAR(50) ,
   company VARCHAR(50) ,
   currency VARCHAR(50) ,
   vat INT,
   max_users INT,
   languages VARCHAR(50) ,
   created_at DATETIME,
   updated_at DATETIME,
   PRIMARY KEY(id),
   UNIQUE(client_number),
   UNIQUE(invoice_number)
);

CREATE TABLE business_hours(
   id DATETIME,
   days VARCHAR(50) ,
   open_time DATETIME,
   close_time DATETIME,
   created_at DATETIME,
   uodated_at DATETIME,
   settings_id INT NOT NULL,
   PRIMARY KEY(id),
   FOREIGN KEY(settings_id) REFERENCES settings(id)
);

CREATE TABLE statuses(
   id INT,
   external_id VARCHAR(50) ,
   title VARCHAR(50) ,
   source_type VARCHAR(50) ,
   color VARCHAR(50) ,
   created_at DATETIME,
   updated_at DATETIME,
   PRIMARY KEY(id)
);

CREATE TABLE leads(
   id INT,
   external_id VARCHAR(50) ,
   title VARCHAR(50) ,
   descrition VARCHAR(50) ,
   qualified INT,
   results VARCHAR(50) ,
   deadline DATETIME,
   deleted_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   user_created_id INT NOT NULL,
   user_assigned_id INT NOT NULL,
   client_id INT NOT NULL,
   status_id INT NOT NULL,
   PRIMARY KEY(id),
   FOREIGN KEY(user_created_id) REFERENCES users(id),
   FOREIGN KEY(user_assigned_id) REFERENCES users(id),
   FOREIGN KEY(client_id) REFERENCES clients(id),
   FOREIGN KEY(status_id) REFERENCES statuses(id)
);

CREATE TABLE offers(
   id INT,
   external_id VARCHAR(250) ,
   send_at DATETIME,
   source_type VARCHAR(50) ,
   source_id VARCHAR(50) ,
   status VARCHAR(50) ,
   deleted_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   client_id INT NOT NULL,
   PRIMARY KEY(id),
   UNIQUE(external_id),
   FOREIGN KEY(client_id) REFERENCES clients(id)
);

CREATE TABLE invoices(
   id INT,
   external_id VARCHAR(250) ,
   status VARCHAR(50) ,
   invoice_number INT,
   sent_at DATETIME,
   due_at DATETIME,
   integration_invoice_id VARCHAR(50) ,
   integration_type VARCHAR(50) ,
   source_type VARCHAR(50) ,
   source_id VARCHAR(50) ,
   deleted_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   client_id INT NOT NULL,
   offer_id INT NOT NULL,
   PRIMARY KEY(id),
   UNIQUE(external_id),
   UNIQUE(invoice_number),
   FOREIGN KEY(client_id) REFERENCES clients(id),
   FOREIGN KEY(offer_id) REFERENCES offers(id)
);

CREATE TABLE payements(
   id INT,
   external_id VARCHAR(250) ,
   amount DECIMAL(15,2)  ,
   description VARCHAR(50) ,
   payement_source DECIMAL(15,2)  ,
   payement_date DATE,
   integration_payment_id VARCHAR(50) ,
   integration_type VARCHAR(50) ,
   deleted_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   invoice_id INT NOT NULL,
   PRIMARY KEY(id),
   UNIQUE(external_id),
   FOREIGN KEY(invoice_id) REFERENCES invoices(id)
);

CREATE TABLE invoice_lines(
   id INT,
   external_id VARCHAR(250) ,
   title VARCHAR(50) ,
   comment VARCHAR(50) ,
   price DECIMAL(15,2)  ,
   type VARCHAR(50) ,
   quantity INT,
   product_id VARCHAR(50) ,
   created_at DATETIME,
   upadted_at DATETIME,
   deleted_at DATETIME,
   offer_id INT NOT NULL,
   invoice_id INT NOT NULL,
   PRIMARY KEY(id),
   UNIQUE(external_id),
   FOREIGN KEY(offer_id) REFERENCES offers(id),
   FOREIGN KEY(invoice_id) REFERENCES invoices(id)
);

CREATE TABLE appointments(
   id VARCHAR(50) ,
   external_id VARCHAR(250) ,
   title VARCHAR(50) ,
   descrition VARCHAR(50) ,
   source_type VARCHAR(50) ,
   source_id VARCHAR(50) ,
   color VARCHAR(50) ,
   start_at DATETIME,
   end_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   deleted_at DATETIME,
   client_id INT NOT NULL,
   user_id INT NOT NULL,
   PRIMARY KEY(id),
   UNIQUE(external_id),
   FOREIGN KEY(client_id) REFERENCES clients(id),
   FOREIGN KEY(user_id) REFERENCES users(id)
);

CREATE TABLE projects(
   id INT,
   external_id VARCHAR(250) ,
   title VARCHAR(50) ,
   descrition VARCHAR(50) ,
   deadline DATETIME,
   deleted_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   user_created_id INT NOT NULL,
   user_assigned_id INT NOT NULL,
   client_id INT NOT NULL,
   status_id INT NOT NULL,
   PRIMARY KEY(id),
   UNIQUE(external_id),
   FOREIGN KEY(user_created_id) REFERENCES users(id),
   FOREIGN KEY(user_assigned_id) REFERENCES users(id),
   FOREIGN KEY(client_id) REFERENCES clients(id),
   FOREIGN KEY(status_id) REFERENCES statuses(id)
);

CREATE TABLE tasks(
   id INT,
   external_id VARCHAR(250) ,
   title VARCHAR(50) ,
   description VARCHAR(50) ,
   deadline DATETIME,
   deleted_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   project_id INT NOT NULL,
   client_id INT NOT NULL,
   user_created_id INT NOT NULL,
   user_assigned_id INT NOT NULL,
   PRIMARY KEY(id),
   UNIQUE(external_id),
   FOREIGN KEY(project_id) REFERENCES projects(id),
   FOREIGN KEY(client_id) REFERENCES clients(id),
   FOREIGN KEY(user_created_id) REFERENCES users(id),
   FOREIGN KEY(user_assigned_id) REFERENCES users(id)
);

CREATE TABLE password_resets(
   email VARCHAR(50) ,
   token VARCHAR(250) ,
   created_at DATETIME,
   PRIMARY KEY(email)
);

CREATE TABLE notifications(
   id INT,
   type VARCHAR(50) ,
   notifiable_type VARCHAR(50) ,
   notifiable_id INT,
   data VARCHAR(50) ,
   read_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   PRIMARY KEY(id)
);

CREATE TABLE integrations(
   id INT,
   name VARCHAR(50) ,
   client_id INT,
   user_id INT,
   client_secret INT,
   api_key VARCHAR(50) ,
   api_type VARCHAR(50) ,
   org_id VARCHAR(50) ,
   created_at DATETIME,
   updated_at DATETIME,
   PRIMARY KEY(id)
);

CREATE TABLE subscritions(
   id INT,
   user_id VARCHAR(50) ,
   name VARCHAR(50) ,
   stripe_id VARCHAR(50) ,
   stripe_status VARCHAR(50) ,
   stripe_plan VARCHAR(50) ,
   quantity INT,
   trial_ends_at DATETIME,
   ends_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   PRIMARY KEY(id)
);

CREATE TABLE activities(
   id INT,
   external_id VARCHAR(50) ,
   long_name VARCHAR(50) ,
   causer_id INT,
   causer_type VARCHAR(50) ,
   text VARCHAR(50) ,
   source_type VARCHAR(50) ,
   source_id INT,
   ip_address VARCHAR(50) ,
   properties VARCHAR(50) ,
   created_at DATETIME,
   updated_at DATETIME,
   deleted_at DATETIME,
   PRIMARY KEY(id)
);

CREATE TABLE products(
   id INT,
   name VARCHAR(50) ,
   external_id VARCHAR(50) ,
   descrition VARCHAR(50) ,
   number VARCHAR(50) ,
   default_type VARCHAR(50) ,
   archived INT,
   integration_type VARCHAR(50) ,
   integration_id INT,
   price DECIMAL(15,2)  ,
   deleted_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   PRIMARY KEY(id)
);

CREATE TABLE documents(
   id INT,
   external_id VARCHAR(50) ,
   size VARCHAR(50) ,
   path VARCHAR(50) ,
   original_filename VARCHAR(50) ,
   mime VARCHAR(50) ,
   integration_id VARCHAR(50) ,
   integration_type VARCHAR(50) ,
   source_type VARCHAR(50) ,
   source_id INT,
   deleted_at DATETIME,
   created_at DATETIME,
   updated_at DATETIME,
   PRIMARY KEY(id)
);

CREATE TABLE permission_role(
   permission_id INT,
   role_id INT,
   PRIMARY KEY(permission_id, role_id),
   FOREIGN KEY(permission_id) REFERENCES permissions(id),
   FOREIGN KEY(role_id) REFERENCES roles(id)
);

CREATE TABLE role_user(
   user_id INT,
   role_id INT,
   PRIMARY KEY(user_id, role_id),
   FOREIGN KEY(user_id) REFERENCES users(id),
   FOREIGN KEY(role_id) REFERENCES roles(id)
);

CREATE TABLE departement_user(
   user_id INT,
   departement_id INT,
   created_at DATETIME,
   updated_at DATETIME,
   PRIMARY KEY(user_id, departement_id),
   FOREIGN KEY(user_id) REFERENCES users(id),
   FOREIGN KEY(departement_id) REFERENCES departements(id)
);
